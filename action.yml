name: "Docker Build with S3 cache"
description: "Builds a Docker image with S3 cache"

inputs:
  cache-bucket:
    description: "Bucket in which the cache is stored"
    required: false
  cache-region:
    description: "Region in which the cache is stored"
    required: false
    default: "us-east-1"
  context:
    description: "The build context"
    required: false
  file:
    description: "The Dockerfile to use"
    required: false
  target:
    description: "The target stage to build"
    required: false
  tags:
    description: "The tags to apply to the built image"
    required: true
  cache-from:
    description: "The cache to use for the build"
    required: false
  cache-to:
    description: "The cache to save after the build"
    required: false
  load:
    description: "Load the built image"
    required: false
    default: "false"
  push:
    description: "Push the built image"
    required: false
    default: "false"
  build-args:
    description: "Build-time variables"
    required: false
  setup-buildx:
    description: "Whether to set up Docker Buildx"
    required: false
    default: "true"
  buildkit-image:
    description: "The BuildKit image to use"
    required: false
    default: "982534392736.dkr.ecr.us-east-1.amazonaws.com/github-cache/docker-hub/moby/buildkit:master"
  local_docker_cache_dir:
    description: "The local directory to store the cache"
    required: false
    default: "/var/tmp/docker-cache"

outputs:
  digest:
    description: "The digest of the built image"
    value: ${{ steps.build-step.outputs.digest }}
  imageid:
    description: "The ID of the built image"
    value: ${{ steps.build-step.outputs.imageid }}
  metadata:
    description: "The metadata of the built image"
    value: ${{ steps.build-step.outputs.metadata }}

runs:
  using: "composite"
  steps:
    - name: Dynamically set cache-from
      shell: bash
      env:
        CACHE_BUCKET: ${{ inputs.cache-bucket }}
        CACHE_REGION: ${{ inputs.cache-region }}
        USER_CACHE_FROM: ${{ inputs.cache-from }}
      run: |
        if [ -n "$USER_CACHE_FROM" ]; then
          echo "CACHE_FROM=$USER_CACHE_FROM" >> $GITHUB_ENV
        elif [ -n "$CACHE_BUCKET" ] && [ -n "$CACHE_REGION" ]; then
          echo "CACHE_FROM=type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=$CACHE_REGION,bucket=$CACHE_BUCKET" >> $GITHUB_ENV
        else
          echo "CACHE_FROM=" >> $GITHUB_ENV
        fi

    - name: Dynamically set cache-to
      shell: bash
      env:
        CACHE_BUCKET: ${{ inputs.cache-bucket }}
        CACHE_REGION: ${{ inputs.cache-region }}
        USER_CACHE_TO: ${{ inputs.cache-to }}
      run: |
        if [ -n "$USER_CACHE_TO" ]; then
          echo "CACHE_TO=$USER_CACHE_TO" >> $GITHUB_ENV
        elif [ -n "$CACHE_BUCKET" ] && [ -n "$CACHE_REGION" ]; then
          echo "CACHE_TO=type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=$CACHE_REGION,bucket=$CACHE_BUCKET,mode=max" >> $GITHUB_ENV
        else
          echo "CACHE_TO=" >> $GITHUB_ENV
        fi

    - name: Set up Docker Buildx
      if: ${{ inputs.setup-buildx == 'true' }}
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=${{ inputs.buildkit-image }}
          network=host

    - name: Create local Docker cache directory
      shell: bash
      run: |
        mkdir -p ${{ inputs.local_docker_cache_dir }}

    - name: Build Docker image
      id: build-step
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        target: ${{ inputs.target }}
        tags: ${{ inputs.tags }}
        cache-from: |
          type=local,src=${{ inputs.local_docker_cache_dir }}
          ${{ env.CACHE_FROM }}
        cache-to: |
          type=local,dest=${{ inputs.local_docker_cache_dir }},compression=zstd,mode=max
          ${{ env.CACHE_TO }}
        load: ${{ inputs.load }}
        push: ${{ inputs.push }}
        build-args: ${{ inputs.build-args }}
